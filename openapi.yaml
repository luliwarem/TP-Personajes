openapi: 3.0.3
info:
  title: API de peliculas y series 3.0
  termsOfService: http://swagger.io/terms/
  version: 1.0.11
tags:
  - name: authentication
    description: Generating token
   
  - name: peliculas
    description: Endpoints de peliculas
    
  - name: personajes
    description: Endpoints de personajes
paths:
  /auth/login:
    get:
      tags:
        - authentication
      summary: Get token
      description: Generate token to authorize access
      operationId: getSignedToken
      responses:
        '200':
          description: Successful operation
  /movies:
    get:
      tags:
        - peliculas
      summary: get all movies
      description: Obtener todas las peliculas con filtro de nombre y de orden
      operationId: getAllMovies
      parameters:
        - name: name
          in: query
          description: nombre de pelicula a buscar
          schema:
            type: string
        - name: order
          in: query
          description: orden de las peliculas (ASC/DESC)
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - peliculas
      summary: insert new movie
      description: Agregar una nueva pelicula
      operationId: insertMovie
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        in: body
        name: movie
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        '200':
          description: Successful operation

  /movies/{id}:
    get:
      tags:
        - peliculas
      summary: get movie by id
      description: Obtener peliculas por id
      operationId: getById
      parameters:
        - name: id
          in: path
          description: Id de la pelicula a obtener
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
        '404':
          description: Id not found
    delete:
      tags:
        - peliculas
      summary: delete movie by id
      description: Eliminar peliculas por id
      operationId: deleteById
      parameters:
        - name: id
          in: path
          description: Id de la pelicula a eliminar
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
        '404':
          description: Id not found
    put:
      tags:
        - peliculas
      summary: update movie by id
      description: Actualizar infomacion de una pelicula
      operationId: updateById
      parameters:
        - name: id
          in: path
          description: Id de la pelicula a actualizar
          required: true
          schema:
            type: integer
      requestBody:
        description: Informacion de la pelicula
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '404':
          description: Id not found
  
  /characters:
    get:
      tags:
        - personajes
      summary: get all characters
      description: Obtener todos los personajes con filtro de nombre, edad o id de la pelicula a la que pertenecen
      operationId: getAll
      parameters:
        - name: name
          in: query
          description: nombre de personaje a buscar
          schema:
            type: string
        - name: age
          in: query
          description: edad del personaje
          schema:
            type: ineteger
        - name: movie
          in: query
          description: id de la pelicula
          schema:
            type: ineteger
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - personajes
      summary: insert new personaje
      description: Agregar una nueva Personaje
      operationId: insertPersonaje
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        in: body
        name: character
        description: The character object
        required: true
        schema:
        $ref: "#/definitions/Character"
      responses:
        '200':
          description: Successful operation


/characters/{id}:
    get:
      tags:
        - peliculas
      summary: get movie by id
      description: Obtener peliculas por id
      operationId: getById
      parameters:
        - name: id
          in: path
          description: Id de la pelicula a obtener
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
        '404':
          description: Id not found
    delete:
      tags:
        - peliculas
      summary: delete movie by id
      description: Eliminar peliculas por id
      operationId: deleteById
      parameters:
        - name: id
          in: path
          description: Id de la pelicula a eliminar
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
        '404':
          description: Id not found
    put:
      tags:
        - peliculas
      summary: update movie by id
      description: Actualizar infomacion de una pelicula
      operationId: updateById
      parameters:
        - name: id
          in: path
          description: Id de la pelicula a actualizar
          required: true
          schema:
            type: integer
      requestBody:
        description: Informacion de la pelicula
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '404':
          description: Id not found
          
          
  
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
    Movie:
      type: object
      properties:
        Imagen:
          type: string
        Titulo:
          type: string
          format: date
        Calificacion:
          type: float
    Character:
      type: object
      properties:
        Imagen:
          type: string
        Nombre:
          type: string
        Edad:
          type: integer
        Peso:
          type: integer
        Historia:
          type: string

  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
